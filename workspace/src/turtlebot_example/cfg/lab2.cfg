#!/usr/bin/env python
PACKAGE='turtlebot_example'
import roslib; roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *
import math

gen = ParameterGenerator()
#       Name                    Type      Reconfiguration level
#       Description
#       Default  Min  Max
gen.add("nParticles", int_t, 0,
        "nParticles.",
         4, 1, 10000)
gen.add("posPriorRange", double_t, 0,
        "posPriorRange.",
         1, 0, 10)
gen.add("thetaPriorRange", double_t, 0,
        "thetaPriorRange.",
         math.pi, 0, math.pi)
exit(gen.generate(PACKAGE, "dynamic_reconfigure_node", "lab2"))

#
# #!/usr/bin/env python
# PACKAGE = "turtlebot_example"
#
# from dynamic_reconfigure.parameter_generator_catkin import *
#
# gen = ParameterGenerator()
#
# gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
# gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
# gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
# gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)
#
# size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#                        gen.const("Medium",     int_t, 1, "A medium constant"),
#                        gen.const("Large",      int_t, 2, "A large constant"),
#                        gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
#                      "An enum to set size")
#
# gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)
#
# exit(gen.generate(PACKAGE, "dynamic_tutorials", "Tutorials"))
